/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ijse.dl.client.view;

import com.ijse.dl.client.connector.ServerConnector;
import com.ijse.dl.client.controllerfactoryimpl.ControllerFactoryImpl;
import com.ijse.dl.common.dto.Book;
import com.ijse.dl.common.dto.Comment;
import com.ijse.dl.common.service.SubjectService;
import com.ijse.dl.common.dto.Subject;
import java.io.IOException;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Randula
 */
public class CommentPanel extends javax.swing.JPanel {

    /**
     * Creates new form CommentPanel
     */
    private Icon icon = new ImageIcon(getClass().getResource(
            "/com/ijse/dl/client/view/images/block.png"));

    public CommentPanel() {
        initComponents();
        getAllSubjects();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sclTable = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelBook = new javax.swing.JTable();
        jXTitledPanel1 = new org.jdesktop.swingx.JXTitledPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listSubject = new javax.swing.JList();
        jXTitledPanel2 = new org.jdesktop.swingx.JXTitledPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listType = new javax.swing.JList();
        lblTitle = new javax.swing.JLabel();

        setOpaque(false);

        table.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Comments"
            }
        ));
        table.setFillsViewportHeight(true);
        table.setFocusable(false);
        table.setPreferredSize(new java.awt.Dimension(75, 100));
        table.setRowHeight(70);
        table.setRowMargin(5);
        table.setSelectionBackground(new java.awt.Color(204, 204, 255));
        sclTable.setViewportView(table);

        tabelBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "mCode", "Name", "Author", "Language", "Media Type"
            }
        ));
        tabelBook.setFillsViewportHeight(true);
        tabelBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelBookMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelBook);

        jXTitledPanel1.setTitle("Subject");
        jXTitledPanel1.setTitleFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jXTitledPanel1.setTitleForeground(new java.awt.Color(255, 255, 255));

        listSubject.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        listSubject.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Java", "Database", "Science", "History", "Environment", "English", "Stories", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listSubject.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listSubject.setSelectionBackground(new java.awt.Color(153, 204, 255));
        listSubject.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(listSubject);

        javax.swing.GroupLayout jXTitledPanel1Layout = new javax.swing.GroupLayout(jXTitledPanel1.getContentContainer());
        jXTitledPanel1.getContentContainer().setLayout(jXTitledPanel1Layout);
        jXTitledPanel1Layout.setHorizontalGroup(
            jXTitledPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jXTitledPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jXTitledPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jXTitledPanel1Layout.setVerticalGroup(
            jXTitledPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 143, Short.MAX_VALUE)
            .addGroup(jXTitledPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jXTitledPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jXTitledPanel2.setTitle("Media Type");
        jXTitledPanel2.setTitleFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jXTitledPanel2.setTitleForeground(new java.awt.Color(255, 255, 255));

        listType.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        listType.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "All", "PDF", "Image", "Audio", "Video", "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        listType.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        listType.setSelectionBackground(new java.awt.Color(153, 204, 255));
        listType.setSelectionForeground(new java.awt.Color(0, 0, 0));
        listType.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listTypeMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(listType);

        javax.swing.GroupLayout jXTitledPanel2Layout = new javax.swing.GroupLayout(jXTitledPanel2.getContentContainer());
        jXTitledPanel2.getContentContainer().setLayout(jXTitledPanel2Layout);
        jXTitledPanel2Layout.setHorizontalGroup(
            jXTitledPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXTitledPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                .addContainerGap())
        );
        jXTitledPanel2Layout.setVerticalGroup(
            jXTitledPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXTitledPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblTitle.setFont(new java.awt.Font("Papyrus", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Readers' Requests...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jXTitledPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jXTitledPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 687, Short.MAX_VALUE)
                            .addComponent(sclTable)))
                    .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(lblTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jXTitledPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jXTitledPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sclTable, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void listTypeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listTypeMouseClicked
        if (!listSubject.isSelectionEmpty()) {
            String subject = (String) listSubject.getSelectedValue();
            String type = (String) listType.getSelectedValue();

            ArrayList<Book> bookList = null;

            if ("All".equalsIgnoreCase(type)) {
                try {
                    bookList = getBookListForAllTypes(subject);
                } catch (IOException | NotBoundException ex) {
                    JOptionPane.showMessageDialog(null, "Server Disconnected",
                            "Oops!",
                            JOptionPane.INFORMATION_MESSAGE, icon);
                }
            } else {
                try {
                    bookList = getBookListForGivenType(subject, type);
                } catch (IOException | NotBoundException ex) {
                    JOptionPane.showMessageDialog(null, "Server Disconnected",
                            "Oops!",
                            JOptionPane.INFORMATION_MESSAGE, icon);
                }
            }
            setTabel(bookList);
        } else {
            JOptionPane.showMessageDialog(this,
                    "Please Select a Subject...", "Warning..",
                    JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_listTypeMouseClicked

    private void tabelBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelBookMouseClicked
        try {
            int i = tabelBook.getSelectedRow();
            String mCode = (String) tabelBook.getValueAt(i, 0);
            loadComments(mCode);
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected", "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }

    }//GEN-LAST:event_tabelBookMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private org.jdesktop.swingx.JXTitledPanel jXTitledPanel1;
    private org.jdesktop.swingx.JXTitledPanel jXTitledPanel2;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JList listSubject;
    private javax.swing.JList listType;
    private javax.swing.JScrollPane sclTable;
    private javax.swing.JTable tabelBook;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    /**
     * Fills List from subject names
     */
    private void getAllSubjects() {
        try {
            SubjectService subjectController = ServerConnector.
                    getServerConnector().getSubjectService();
            ArrayList<Subject> allSubject = subjectController.getAll();
            ArrayList<String> nameList = new ArrayList<>();

            listSubject.removeAll();
            for (Subject subject : allSubject) {
                nameList.add(subject.getSubjectName());
            }
            Collections.sort(nameList);
            listSubject.setListData(nameList.toArray());
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected", "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }

    }

    private ArrayList<Book> getBookListForAllTypes(String subject)
            throws IOException, RemoteException,
            MalformedURLException, NotBoundException {

        ArrayList<Book> bookList
                = new ControllerFactoryImpl().getBookController().
                searchBookBySubject(subject);
        return bookList;
    }

    private ArrayList<Book> getBookListForGivenType(String subject, String type)
            throws IOException, RemoteException, NotBoundException {
        ArrayList<Book> bookList
                = new ControllerFactoryImpl().getBookController().
                searchBookByTypeAndSubject(subject, type);
        return bookList;
    }

    private void setTabel(ArrayList<Book> allBooks) {
        DefaultTableModel dtm = (DefaultTableModel) tabelBook.getModel();
        dtm.setRowCount(0);

        for (Book book : allBooks) {
            Object[] rows = {book.getmCode(), book.getName(),
                book.getAuthor(), book.getLanguage(), book.getType()};
            dtm.addRow(rows);
        }
        setTableSoter();
    }

    private void setTableSoter() {
        TableRowSorter<TableModel> sorter
                = new TableRowSorter<>(tabelBook.getModel());
        tabelBook.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys
                = new ArrayList<>(tabelBook.getRowCount());

        sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
        sortKeys.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
        sorter.setSortKeys(sortKeys);
    }

    private void loadComments(String mCode)
            throws IOException, RemoteException, NotBoundException {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        ArrayList<Comment> commentList
                = new ControllerFactoryImpl()
                .getCommentController().getCommentOnBook(mCode);
        dtm.setRowCount(0);
        for (Comment comment : commentList) {
            Object[] row = {"<html>"
                + "<span style=\"color: 4183D7;\">" + comment.getContent()
                + "</span>"
                + "<br>"
                + "<font size = -1>" + comment.getSender() + "</font>"
                + "<br>"
                + "<font size = -1>" + comment.getDate() + "</font>"
                + "</html>"};
            dtm.addRow(row);
        }
    }

}
