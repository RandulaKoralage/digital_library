/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ijse.dl.client.view;

import com.ijse.dl.client.controller.SubjectController;
import com.ijse.dl.client.controllerfactoryimpl.ControllerFactoryImpl;
import com.ijse.dl.client.observerimpl.SubjectObserverImpl;
import com.ijse.dl.client.view.util.Pop;
import com.ijse.dl.client.view.util.Validation;
import com.ijse.dl.common.dto.Subject;
import com.ijse.dl.common.observer.SubjectObserver;
import java.io.IOException;
import java.rmi.NotBoundException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Randula
 */
public class ManageSubjectPanel extends javax.swing.JPanel {

    public static String lockId = "";

    /**
     * Creates new form ManageSubjectPanel
     */
    private Icon icon = new ImageIcon(getClass().getResource(
            "/com/ijse/dl/client/view/images/block.png"));
    public static SubjectObserver subjectObserver;

    public ManageSubjectPanel() {
        try {
            initComponents();
            subjectObserver = new SubjectObserverImpl(this);
            getAllSubjects();
            new ControllerFactoryImpl().getSubjectController()
                    .addSubjectObserver(subjectObserver);

        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected", "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSCOde = new javax.swing.JLabel();
        txtName = new javax.swing.JFormattedTextField();
        lblName = new javax.swing.JLabel();
        txtSCode = new javax.swing.JFormattedTextField();
        lblDescription = new javax.swing.JLabel();
        txtDescription = new javax.swing.JFormattedTextField();
        btnDelete = new javax.swing.JButton();
        jXTitledPanel1 = new org.jdesktop.swingx.JXTitledPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        list = new javax.swing.JList();
        btnSave = new javax.swing.JButton();

        setOpaque(false);
        addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                formComponentRemoved(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblTitle.setFont(new java.awt.Font("Papyrus", 1, 18)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setText("Supported Subject...");
        add(lblTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, 224, 26));

        lblSCOde.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblSCOde.setForeground(new java.awt.Color(255, 255, 255));
        lblSCOde.setText("SCode");
        add(lblSCOde, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 94, 112, 30));

        txtName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 204), 1, true));
        txtName.setForeground(new java.awt.Color(0, 51, 204));
        txtName.setCaretColor(new java.awt.Color(51, 102, 255));
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });
        txtName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtNameKeyReleased(evt);
            }
        });
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 144, 330, 30));

        lblName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblName.setForeground(new java.awt.Color(255, 255, 255));
        lblName.setText("Subject Name");
        add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 144, 97, 30));

        txtSCode.setEditable(false);
        txtSCode.setBackground(new java.awt.Color(255, 255, 255));
        txtSCode.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 204), 1, true));
        txtSCode.setForeground(new java.awt.Color(0, 51, 204));
        txtSCode.setText("This Will Fill Automatically");
        txtSCode.setCaretColor(new java.awt.Color(51, 102, 255));
        txtSCode.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        txtSCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSCodeActionPerformed(evt);
            }
        });
        add(txtSCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 94, 330, 30));

        lblDescription.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblDescription.setForeground(new java.awt.Color(255, 255, 255));
        lblDescription.setText("Description");
        add(lblDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 190, 97, 30));

        txtDescription.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 204), 1, true));
        txtDescription.setForeground(new java.awt.Color(0, 51, 204));
        txtDescription.setCaretColor(new java.awt.Color(51, 102, 255));
        txtDescription.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescriptionActionPerformed(evt);
            }
        });
        txtDescription.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDescriptionKeyReleased(evt);
            }
        });
        add(txtDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 190, 330, 30));

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(255, 255, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/delete1.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setContentAreaFilled(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDelete.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDeleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDeleteMouseExited(evt);
            }
        });
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 280, 110, 90));

        jXTitledPanel1.setForeground(new java.awt.Color(255, 255, 255));
        jXTitledPanel1.setTitle("Current Subjects");
        jXTitledPanel1.setTitleFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        list.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        list.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Information Technology", "English", "Database" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(list);

        javax.swing.GroupLayout jXTitledPanel1Layout = new javax.swing.GroupLayout(jXTitledPanel1.getContentContainer());
        jXTitledPanel1.getContentContainer().setLayout(jXTitledPanel1Layout);
        jXTitledPanel1Layout.setHorizontalGroup(
            jXTitledPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXTitledPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addContainerGap())
        );
        jXTitledPanel1Layout.setVerticalGroup(
            jXTitledPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXTitledPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(jXTitledPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 74, -1, -1));

        btnSave.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/save1.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setContentAreaFilled(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSaveMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSaveMouseExited(evt);
            }
        });
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        add(btnSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 280, 110, 90));
    }// </editor-fold>//GEN-END:initComponents

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        txtDescription.requestFocusInWindow();
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtSCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSCodeActionPerformed
        txtName.requestFocusInWindow();
    }//GEN-LAST:event_txtSCodeActionPerformed

    private void txtDescriptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescriptionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescriptionActionPerformed

    private void btnDeleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseEntered
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/com/ijse/dl/client/view/images/delete2.png")));
    }//GEN-LAST:event_btnDeleteMouseEntered

    private void btnDeleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDeleteMouseExited
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/com/ijse/dl/client/view/images/delete1.png")));
    }//GEN-LAST:event_btnDeleteMouseExited

    private void btnSaveMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseEntered
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/com/ijse/dl/client/view/images/save2.png")));
    }//GEN-LAST:event_btnSaveMouseEntered

    private void btnSaveMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseExited
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/com/ijse/dl/client/view/images/save1.png")));
    }//GEN-LAST:event_btnSaveMouseExited

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveMouseClicked

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed

        if (!list.isSelectionEmpty()) {
            updateSubject();
        } else {
            addSubject();
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        fillTextFields();
    }//GEN-LAST:event_listMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (!list.isSelectionEmpty()) {
            String id = txtSCode.getText();

            deleteSubject();
        } else {
            JOptionPane.showMessageDialog(this,
                    "Please select a Subject to delete...", "Error", 0);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void formComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_formComponentRemoved
        try {
            SubjectController subjectController
                    = new ControllerFactoryImpl().getSubjectController();
            subjectController.releaseSubject(lockId);
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected", "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }
    }//GEN-LAST:event_formComponentRemoved

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        try {
            new ControllerFactoryImpl().getSubjectController()
                    .removeSubjectObserver(subjectObserver);
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected", "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }
    }//GEN-LAST:event_formComponentMoved

    private void txtNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNameKeyReleased
        Validation.name(txtName);
    }//GEN-LAST:event_txtNameKeyReleased

    private void txtDescriptionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDescriptionKeyReleased
        Validation.name(txtDescription);
    }//GEN-LAST:event_txtDescriptionKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXTitledPanel jXTitledPanel1;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblSCOde;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JList list;
    private javax.swing.JFormattedTextField txtDescription;
    private javax.swing.JFormattedTextField txtName;
    private javax.swing.JFormattedTextField txtSCode;
    // End of variables declaration//GEN-END:variables

    /**
     * Adds subjects to database
     */
    private void addSubject() {
        try {

            String name = txtName.getText();
            String description = txtDescription.getText();

            Subject subject = new Subject("0", name, description);

            SubjectController subjectController
                    = new ControllerFactoryImpl().getSubjectController();
            boolean isAdded = subjectController.addRecord(subject);
            if (isAdded) {
                JOptionPane.showMessageDialog(this,
                        "Successfully Saved...", "Message", 1);
                txtName.setText(null);
                txtDescription.setText(null);
                getAllSubjects();
            } else {
                JOptionPane.showMessageDialog(this,
                        "Unable to Save...", "Message", 1);
            }
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(this,
                    "Unable to Connect to the Server...", "Error", 0);
        }
    }

    /**
     * Fills List from subject names
     */
    private void getAllSubjects() {
        try {
            SubjectController subjectController
                    = new ControllerFactoryImpl().getSubjectController();

            ArrayList<Subject> allSubject = subjectController.getAll();
            ArrayList<String> nameList = new ArrayList<>();

            list.removeAll();
            for (Subject subject : allSubject) {
                nameList.add(subject.getSubjectName());
            }
            Collections.sort(nameList);
            list.setListData(nameList.toArray());
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected", "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }

    }

    /**
     * Fills text fields when click on List
     */
    private void fillTextFields() {
        try {
            String name = (String) list.getSelectedValue();
            SubjectController subjectController
                    = new ControllerFactoryImpl().getSubjectController();
            Subject subject = subjectController.searchRecordByName(name);

            String id = subject.getSubjectId();
            if (lockId != id) {
                boolean releaseSubject
                        = subjectController.releaseSubject(lockId);
                System.out.println(lockId + " : isRelesed : " + releaseSubject);
                lockId = id;
            }
            lockId = id;
            if (subject != null) {
                if (subjectController.reserveSubject(id)) {
                    txtSCode.setText(subject.getSubjectId());
                    txtName.setText(subject.getSubjectName());
                    txtDescription.setText(subject.getDescription());
                } else {
                    JOptionPane.showMessageDialog(this, id
                            + " is Currently in Process");
                }
            }
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected", "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }
    }

    /**
     * Updates subjects in database
     */
    private void updateSubject() {
        try {
            String id = txtSCode.getText();
            String name = txtName.getText();
            String description = txtDescription.getText();

            Subject subject = new Subject(id, name, description);

            boolean isUpdated
                    = new ControllerFactoryImpl().
                    getSubjectController().updateRecord(subject, id);
            if (isUpdated) {
                JOptionPane.showMessageDialog(this,
                        "Successfully Saved...", "Message", 1);

                txtName.setText(null);
                txtDescription.setText(null);
                getAllSubjects();

            } else {
                JOptionPane.showMessageDialog(this,
                        "Unable to Save...", "Message", 1);
            }
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(this,
                    "Unable to Connect to the Server...", "Error", 0);
        } finally {
            try {
                new ControllerFactoryImpl()
                        .getSubjectController().releaseSubject(lockId);
            } catch (IOException | NotBoundException ex) {
                JOptionPane.showMessageDialog(null, "Server Disconnected",
                        "Oops!",
                        JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }
    }

    /**
     * Deletes subjects from database
     */
    private void deleteSubject() {
        try {

            SubjectController subjectController
                    = new ControllerFactoryImpl().getSubjectController();
            boolean isDeleted
                    = subjectController.deleteRecord(txtSCode.getText());
            if (isDeleted) {
                JOptionPane.showMessageDialog(this,
                        "Successfully Deleted...", "Message", 1);
                txtName.setText(null);
                txtDescription.setText(null);

            } else {
                JOptionPane.showMessageDialog(this,
                        "Unable to Delete...", "Message", 1);
            }
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(this,
                    "Unable to Connect to the Server...", "Error", 0);
        } finally {
            try {
                SubjectController subjectController
                        = new ControllerFactoryImpl().getSubjectController();
                subjectController.releaseSubject(lockId);
            } catch (IOException | NotBoundException ex) {
                JOptionPane.showMessageDialog(null, "Server Disconnected",
                        "Oops!",
                        JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }
    }

    public void setNewSubjectList(List<Subject> subjectList) {

        ArrayList<Subject> allSubject = (ArrayList<Subject>) subjectList;
        ArrayList<String> nameList = new ArrayList<>();
        list.removeAll();
        for (Subject subject : allSubject) {
            nameList.add(subject.getSubjectName());
        }
        Collections.sort(nameList);
        list.setListData(nameList.toArray());
    }

    public void setMessage(String message) {
        new Thread() {
            @Override
            public void run() {
                try {
                    Pop p = new Pop(message);
                    Thread.sleep(5000);
                    p.dispose();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        ;
    }


.start();
    }
}
