/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ijse.dl.client.view;

import com.ijse.dl.client.controllerfactoryimpl.ControllerFactoryImpl;
import com.ijse.dl.client.observerimpl.BookObserverImpl;
import com.ijse.dl.client.softwarefactory.SoftwareFactory;
import com.ijse.dl.client.softwarefactoryimpl.SoftwareFactoryImpl;
import com.ijse.dl.client.view.util.StarRatings;
import com.ijse.dl.client.view.util.TranspotableImage;
import com.ijse.dl.client.view.util.Validation;
import com.ijse.dl.common.dto.Access;
import com.ijse.dl.common.dto.Book;
import com.ijse.dl.common.dto.Comment;
import com.ijse.dl.common.dto.Download;
import com.ijse.dl.common.observer.BookObserver;
import com.ijse.dl.common.util.TransportableItem;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javafx.application.Platform;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import notepad.NotePadSof;
import util.DetectDriver;

/**
 *
 * @author Randula
 */
public class PreviewForm extends javax.swing.JFrame {

    private String mCode;

    private File targetFile;
    private CatalogForm catalogForm;    //Refer CatalogForm object
    private URL pathForGoldStars = getClass().getResource(
            "/com/ijse/dl/client/view/images/goldStar.png");
    private Icon icon = new ImageIcon(getClass().getResource(
            "/com/ijse/dl/client/view/images/block.png"));
    private ArrayList<JLabel> labelList = new ArrayList<>();
    private ArrayList<JLabel> staticLabelList = new ArrayList<>();
    private StarRatings starRatings = new StarRatings();
    private double curRate;
    private Book book;
    private String tempFilePath;
    private BookObserver bookObserver;
    private int posX;
    private int posY;

    /**
     * Creates new form PreviewForm
     */
    public PreviewForm() {
        try {
            initComponents();
            setFullScreen();
            getTime();
            bookObserver = new BookObserverImpl(this);
            new ControllerFactoryImpl().getBookController().addBookObserver(bookObserver);
            pnlComment.setVisible(false);
            addStars();
        } catch (RemoteException ex) {
            System.err.println(ex.getMessage());
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected",
                    "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }

    }

    PreviewForm(String mCode, String userName, CatalogForm catalogForm) {
        try {
            initComponents();
            setFullScreen();
            getTime();
            bookObserver = new BookObserverImpl(this);
            new ControllerFactoryImpl().getBookController()
                    .addBookObserver(bookObserver);
            addStars();
            addStaticStars();
            this.mCode = mCode;
            pnlComment.setVisible(false);
            this.catalogForm = catalogForm;

            arrangeForm();
            loadComments(mCode);

            new ControllerFactoryImpl().getBookController().reserveBook(mCode);

        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected",
                    "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblImg1 = new javax.swing.JLabel();
        lblCode = new javax.swing.JLabel();
        txtCode = new javax.swing.JTextField();
        lblMediaType = new javax.swing.JLabel();
        txtSubject = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        lblName = new javax.swing.JLabel();
        lblDescription = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        lblAuthor = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        lblSubject = new javax.swing.JLabel();
        txtMediaType = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        pnlComment = new javax.swing.JPanel();
        lblComment = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtComment = new javax.swing.JTextArea();
        sclTable = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        cmbName = new javax.swing.JComboBox();
        btnSubmit = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        btnHome = new javax.swing.JButton();
        panelStar = new javax.swing.JPanel();
        lblS5 = new javax.swing.JLabel();
        lblS1 = new javax.swing.JLabel();
        lblS2 = new javax.swing.JLabel();
        lblS3 = new javax.swing.JLabel();
        lblS4 = new javax.swing.JLabel();
        lblFeedBack = new javax.swing.JLabel();
        lblRateThis = new javax.swing.JLabel();
        btnDownload = new javax.swing.JButton();
        staticPanel = new javax.swing.JPanel();
        lblR1 = new javax.swing.JLabel();
        lblR5 = new javax.swing.JLabel();
        lblR4 = new javax.swing.JLabel();
        lblR3 = new javax.swing.JLabel();
        lblR2 = new javax.swing.JLabel();
        lblRate = new javax.swing.JLabel();
        lblWrittingPad = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        lblClock = new javax.swing.JLabel();
        lblBackground = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblImg1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblImg1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblImg1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lblImg1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblImg1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        getContentPane().add(lblImg1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1210, 20, 130, 160));

        lblCode.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblCode.setForeground(new java.awt.Color(255, 255, 255));
        lblCode.setText("MCode");
        getContentPane().add(lblCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 90, 30));

        txtCode.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        getContentPane().add(txtCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 180, 270, 30));

        lblMediaType.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblMediaType.setForeground(new java.awt.Color(255, 255, 255));
        lblMediaType.setText("Media Type");
        getContentPane().add(lblMediaType, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 440, 90, 30));

        txtSubject.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtSubject.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        getContentPane().add(txtSubject, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 400, 270, 30));

        txtName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        getContentPane().add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 220, 270, 30));

        lblName.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblName.setForeground(new java.awt.Color(255, 255, 255));
        lblName.setText("Name");
        getContentPane().add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 220, 90, 30));

        lblDescription.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblDescription.setForeground(new java.awt.Color(255, 255, 255));
        lblDescription.setText("Description");
        getContentPane().add(lblDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 260, 90, 80));

        txtAuthor.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtAuthor.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        getContentPane().add(txtAuthor, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 360, 270, 30));

        lblAuthor.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblAuthor.setForeground(new java.awt.Color(255, 255, 255));
        lblAuthor.setText("Author");
        getContentPane().add(lblAuthor, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 360, 90, 30));

        txtDescription.setColumns(20);
        txtDescription.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtDescription.setLineWrap(true);
        txtDescription.setRows(5);
        jScrollPane1.setViewportView(txtDescription);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 260, 270, 90));

        lblSubject.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        lblSubject.setForeground(new java.awt.Color(255, 255, 255));
        lblSubject.setText("Subject");
        getContentPane().add(lblSubject, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 400, 90, 30));

        txtMediaType.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        txtMediaType.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153)));
        getContentPane().add(txtMediaType, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 440, 270, 30));

        jLabel7.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/refreshMini.png"))); // NOI18N
        jLabel7.setText("View Comments");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 490, 210, 30));

        pnlComment.setOpaque(false);
        pnlComment.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblComment.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        lblComment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/comment.png"))); // NOI18N
        lblComment.setText("Your Comment");
        pnlComment.add(lblComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 240, 190, 20));

        txtComment.setColumns(20);
        txtComment.setLineWrap(true);
        txtComment.setRows(5);
        txtComment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCommentKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(txtComment);

        pnlComment.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 290, 270, 90));

        sclTable.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        table.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Comments"
            }
        ));
        table.setFillsViewportHeight(true);
        table.setPreferredSize(new java.awt.Dimension(75, 100));
        table.setRowHeight(70);
        table.setRowMargin(5);
        sclTable.setViewportView(table);

        pnlComment.add(sclTable, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 500, 210));

        cmbName.setEditable(true);
        cmbName.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Anonymos", "User" }));
        cmbName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cmbNameKeyReleased(evt);
            }
        });
        pnlComment.add(cmbName, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, 270, 30));

        btnSubmit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/accept1.png"))); // NOI18N
        btnSubmit.setContentAreaFilled(false);
        btnSubmit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSubmitMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSubmitMouseExited(evt);
            }
        });
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        pnlComment.add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 330, 70, 60));

        getContentPane().add(pnlComment, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 160, 560, 400));

        btnView.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnView.setForeground(new java.awt.Color(255, 255, 255));
        btnView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/view1.png"))); // NOI18N
        btnView.setText("View");
        btnView.setContentAreaFilled(false);
        btnView.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnView.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnView.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnViewMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnViewMouseExited(evt);
            }
        });
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        getContentPane().add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 530, 110, 90));

        btnHome.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnHome.setForeground(new java.awt.Color(255, 255, 255));
        btnHome.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/home1.png"))); // NOI18N
        btnHome.setText("Back");
        btnHome.setContentAreaFilled(false);
        btnHome.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnHome.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnHomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnHomeMouseExited(evt);
            }
        });
        btnHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHomeActionPerformed(evt);
            }
        });
        getContentPane().add(btnHome, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 530, 110, 90));

        panelStar.setOpaque(false);
        panelStar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblS5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/emptyStar.png"))); // NOI18N
        lblS5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblS5MouseClicked(evt);
            }
        });
        panelStar.add(lblS5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 50, 50));

        lblS1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/emptyStar.png"))); // NOI18N
        lblS1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblS1MouseClicked(evt);
            }
        });
        panelStar.add(lblS1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 50, 50));

        lblS2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/emptyStar.png"))); // NOI18N
        lblS2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblS2MouseClicked(evt);
            }
        });
        panelStar.add(lblS2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 50, 50));

        lblS3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/emptyStar.png"))); // NOI18N
        lblS3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblS3MouseClicked(evt);
            }
        });
        panelStar.add(lblS3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 0, 50, 50));

        lblS4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/emptyStar.png"))); // NOI18N
        lblS4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblS4MouseClicked(evt);
            }
        });
        panelStar.add(lblS4, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, 50, 50));

        lblFeedBack.setFont(new java.awt.Font("Trajan Pro", 0, 18)); // NOI18N
        lblFeedBack.setForeground(new java.awt.Color(255, 255, 255));
        lblFeedBack.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        panelStar.add(lblFeedBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 190, 30));

        getContentPane().add(panelStar, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 210, 210, 90));

        lblRateThis.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblRateThis.setForeground(new java.awt.Color(255, 255, 255));
        lblRateThis.setText("Rate this ");
        getContentPane().add(lblRateThis, new org.netbeans.lib.awtextra.AbsoluteConstraints(1160, 180, 120, 30));

        btnDownload.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDownload.setForeground(new java.awt.Color(255, 255, 255));
        btnDownload.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/download1.png"))); // NOI18N
        btnDownload.setText("Download");
        btnDownload.setContentAreaFilled(false);
        btnDownload.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnDownload.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnDownload.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnDownloadMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnDownloadMouseExited(evt);
            }
        });
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });
        getContentPane().add(btnDownload, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 530, 120, 90));

        staticPanel.setOpaque(false);
        staticPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblR1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/blackStar.png"))); // NOI18N
        staticPanel.add(lblR1, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 30, 30));

        lblR5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/blackStar.png"))); // NOI18N
        staticPanel.add(lblR5, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 10, 30, 30));

        lblR4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/blackStar.png"))); // NOI18N
        staticPanel.add(lblR4, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 30, 30));

        lblR3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/blackStar.png"))); // NOI18N
        staticPanel.add(lblR3, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 30, 30));

        lblR2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblR2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/blackStar.png"))); // NOI18N
        staticPanel.add(lblR2, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 30, 30));

        lblRate.setFont(new java.awt.Font("Tekton Pro", 1, 24)); // NOI18N
        lblRate.setText("5.5");
        staticPanel.add(lblRate, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 10, 50, 40));

        getContentPane().add(staticPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 660, 260, -1));

        lblWrittingPad.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblWrittingPad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/notepad.png"))); // NOI18N
        lblWrittingPad.setText("Writting Pad");
        lblWrittingPad.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblWrittingPad.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lblWrittingPad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblWrittingPadMouseClicked(evt);
            }
        });
        getContentPane().add(lblWrittingPad, new org.netbeans.lib.awtextra.AbsoluteConstraints(1260, 560, 90, 100));

        jLabel4.setFont(new java.awt.Font("Verdana", 0, 36)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("MAZE");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 110, 50));

        jLabel5.setFont(new java.awt.Font("Verdana", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Reading Room");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 120, 20));
        getContentPane().add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 1210, 10));

        lblClock.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblClock.setForeground(new java.awt.Color(255, 255, 255));
        lblClock.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblClock.setText("Time");
        getContentPane().add(lblClock, new org.netbeans.lib.awtextra.AbsoluteConstraints(1100, 40, 100, 20));

        lblBackground.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblBackground.setForeground(new java.awt.Color(255, 255, 255));
        lblBackground.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ijse/dl/client/view/images/back.jpg"))); // NOI18N
        lblBackground.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lblBackground.setMaximumSize(new java.awt.Dimension(1368, 766));
        lblBackground.setMinimumSize(new java.awt.Dimension(1368, 766));
        lblBackground.setPreferredSize(new java.awt.Dimension(1368, 766));
        getContentPane().add(lblBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(-110, -480, 1690, 1320));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        pnlComment.setVisible(true);
    }//GEN-LAST:event_jLabel7MouseClicked

    private void btnSubmitMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSubmitMouseEntered
        if (btnSubmit.isEnabled()) {
            btnSubmit.setIcon(
                    new javax.swing.ImageIcon(getClass().getResource(
                                    "/com/ijse/dl/client"
                                    + "/view/images/accept2.png")));
        }
    }//GEN-LAST:event_btnSubmitMouseEntered

    private void btnSubmitMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSubmitMouseExited
        if (btnSubmit.isEnabled()) {
            btnSubmit.setIcon(
                    new javax.swing.ImageIcon(getClass().getResource(
                                    "/com/ijse/dl/client"
                                    + "/view/images/accept1.png")));
        }
    }//GEN-LAST:event_btnSubmitMouseExited

    private void btnViewMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnViewMouseEntered
        btnView.setIcon(
                new javax.swing.ImageIcon(getClass().getResource(
                                "/com/ijse/dl/client/view/images/view2.png")));
    }//GEN-LAST:event_btnViewMouseEntered

    private void btnViewMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnViewMouseExited
        btnView.setIcon(
                new javax.swing.ImageIcon(getClass().getResource(
                                "/com/ijse/dl/client/view/images/view1.png")));
    }//GEN-LAST:event_btnViewMouseExited

    private void btnHomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomeMouseEntered
        btnHome.setIcon(
                new javax.swing.ImageIcon(getClass().getResource(
                                "/com/ijse/dl/client/view/images/home2.png")));
    }//GEN-LAST:event_btnHomeMouseEntered

    private void btnHomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomeMouseExited
        btnHome.setIcon(
                new javax.swing.ImageIcon(getClass().getResource(
                                "/com/ijse/dl/client/view/images/home1.png")));
    }//GEN-LAST:event_btnHomeMouseExited

    private void btnHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHomeActionPerformed
        try {
            catalogForm.setVisible(true);
            if (targetFile != null) {
                if (targetFile.exists()) {
                    targetFile.delete();
                }
            }
            deleteTemp();
            
            new ControllerFactoryImpl().getBookController().releaseBook(mCode);
            this.dispose();
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected",
                    "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        } finally {

            if (targetFile != null) {
                if (targetFile.exists()) {
                    targetFile.delete();
                }
            }
        }
    }//GEN-LAST:event_btnHomeActionPerformed

    private void lblS1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblS1MouseClicked
        int starCount
                = starRatings.colorStars(labelList, lblS1, pathForGoldStars);
        if (starCount > 0) {
            showComfirmDialog(starCount);
        }
    }//GEN-LAST:event_lblS1MouseClicked

    private void lblS2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblS2MouseClicked
        int starCount
                = starRatings.colorStars(labelList, lblS2, pathForGoldStars);
        if (starCount > 1) {
            showComfirmDialog(starCount);
        }
    }//GEN-LAST:event_lblS2MouseClicked

    private void lblS3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblS3MouseClicked
        int starCount
                = starRatings.colorStars(labelList, lblS3, pathForGoldStars);
        if (starCount > 2) {
            showComfirmDialog(starCount);
        }
    }//GEN-LAST:event_lblS3MouseClicked

    private void lblS4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblS4MouseClicked
        int starCount
                = starRatings.colorStars(labelList, lblS4, pathForGoldStars);
        if (starCount > 3) {
            showComfirmDialog(starCount);
        }
    }//GEN-LAST:event_lblS4MouseClicked

    private void lblS5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblS5MouseClicked
        int starCount
                = starRatings.colorStars(labelList, lblS5, pathForGoldStars);
        if (starCount > 4) {
            showComfirmDialog(starCount);
        }
    }//GEN-LAST:event_lblS5MouseClicked

    private void btnDownloadMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDownloadMouseEntered
        if (btnDownload.isEnabled()) {
            btnDownload.setIcon(
                    new ImageIcon(getClass().getResource(
                                    "/com/ijse/dl/client"
                                    + "/view/images/download2.png")));
        }
    }//GEN-LAST:event_btnDownloadMouseEntered

    private void btnDownloadMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnDownloadMouseExited
        if (btnDownload.isEnabled()) {
            btnDownload.setIcon(
                    new ImageIcon(getClass().getResource(
                                    "/com/ijse/dl/client"
                                    + "/view/images/download1.png")));
        }
    }//GEN-LAST:event_btnDownloadMouseExited

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        if (btnDownload.isEnabled()) {
            try {
                boolean isSaved = saveInPen();
                if (isSaved) {
                    JOptionPane.showMessageDialog(this,
                            "Successfully Saved in Pen Drive...", "Message",
                            JOptionPane.INFORMATION_MESSAGE);
                    boolean isAdded = saveDownload();
                    if (isSaved) {
                        btnDownload.setEnabled(false);
                    }
                }
            } catch (IOException | NotBoundException ex) {
                JOptionPane.showMessageDialog(null, "Server Disconnected",
                        "Oops!",
                        JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        try {
            saveAccess();
            byte[] eBook = loadBook();
            saveAsTempery(eBook, mCode);
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected",
                    "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        if (btnSubmit.isEnabled()) {
            try {
                boolean isAdded = saveComment(mCode);

                if (isAdded) {
                    btnSubmit.setEnabled(false);
                    loadComments(mCode);
                }
            } catch (IOException | NotBoundException ex) {
                JOptionPane.showMessageDialog(null, "Server Disconnected",
                        "Oops!",
                        JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void lblWrittingPadMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblWrittingPadMouseClicked

        NotePadSof notePadSof = new NotePadSof();

    }//GEN-LAST:event_lblWrittingPadMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {

            new ControllerFactoryImpl().getBookController()
                    .removeBookObserver(bookObserver);

        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected",
                    "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        } finally {

            if (targetFile != null) {
                if (targetFile.exists()) {
                    System.out.println("Is Exist " + targetFile.exists());
                    targetFile.delete();
                    //   mediaPlayerSof.stopPlayer();
                }
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void txtCommentKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCommentKeyReleased
        Validation.removeSemiColen(txtComment, evt);
    }//GEN-LAST:event_txtCommentKeyReleased

    private void cmbNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbNameKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbNameKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreviewForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreviewForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreviewForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreviewForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreviewForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnHome;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox cmbName;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblBackground;
    private javax.swing.JLabel lblClock;
    private javax.swing.JLabel lblCode;
    private javax.swing.JLabel lblComment;
    private javax.swing.JLabel lblDescription;
    private javax.swing.JLabel lblFeedBack;
    private javax.swing.JLabel lblImg1;
    private javax.swing.JLabel lblMediaType;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblR1;
    private javax.swing.JLabel lblR2;
    private javax.swing.JLabel lblR3;
    private javax.swing.JLabel lblR4;
    private javax.swing.JLabel lblR5;
    private javax.swing.JLabel lblRate;
    private javax.swing.JLabel lblRateThis;
    private javax.swing.JLabel lblS1;
    private javax.swing.JLabel lblS2;
    private javax.swing.JLabel lblS3;
    private javax.swing.JLabel lblS4;
    private javax.swing.JLabel lblS5;
    private javax.swing.JLabel lblSubject;
    private javax.swing.JLabel lblWrittingPad;
    private javax.swing.JPanel panelStar;
    private javax.swing.JPanel pnlComment;
    private javax.swing.JScrollPane sclTable;
    private javax.swing.JPanel staticPanel;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtCode;
    private javax.swing.JTextArea txtComment;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtMediaType;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtSubject;
    // End of variables declaration//GEN-END:variables

    private void arrangeForm()
            throws IOException, RemoteException,
            MalformedURLException, NotBoundException {

        Book book
                = new ControllerFactoryImpl()
                .getBookController().searchBook(mCode);

        if (book != null) {
            this.book = book;
            txtCode.setText(mCode);
            txtName.setText(book.getName());
            txtDescription.setText(book.getDescription());
            txtAuthor.setText(book.getAuthor());
            txtSubject.setText(book.getSubject());
            txtMediaType.setText(book.getType());

            String download = null;
            if (book.getDownloadable().equalsIgnoreCase("N")) {
                btnDownload.setEnabled(false);
            } else {
                btnDownload.setEnabled(true);
            }
            String rate = book.getRating();
            double currentRate = Double.parseDouble(rate);
            curRate = currentRate;
            drawRatingStars(currentRate);

            byte[] cover = book.getImage();
            createCover(cover);
        }
    }

    private void createCover(byte[] cover)
            throws IOException {

        BufferedImage currentImage
                = new TranspotableImage().createBufferedImage(cover);
        BufferedImage image = resizeImage(currentImage);
        lblImg1.setIcon(new ImageIcon((Image) image));
    }

    private void drawRatingStars(double currentRate) {

        lblRate.setText(Double.toString(currentRate));

        URL pathOfFullStar = getClass().getResource(
                "/com/ijse/dl/client/view/images/grayStar.png");
        URL pathOfHalfStar = getClass().getResource(
                "/com/ijse/dl/client/view/images/halfStar.png");
        new StarRatings().setStaticStars(
                staticLabelList, pathOfFullStar, pathOfHalfStar, currentRate);
    }

    private void showComfirmDialog(int starCount) {
        int comfirmed = JOptionPane.showConfirmDialog(
                this, "Do you " + starRatings.getFeedBack(starCount)
                + " ?", "Rate this Book", 0);
        if (comfirmed == 0) {
            lblFeedBack.setText(starRatings.getFeedBack(starCount));
            double newRate = 0.0;
            if (curRate > 0) {
                newRate = (starCount + curRate) / 2;
                DecimalFormat df = new DecimalFormat("#.#");
                newRate = Double.valueOf(df.format(newRate));
            } else {
                newRate = starCount;
                DecimalFormat df = new DecimalFormat("#.#");
                newRate = Double.valueOf(df.format(newRate));
            }
            drawRatingStars(newRate);
            saveRate(newRate);
        } else {
            URL path = getClass().getResource(
                    "/com/ijse/dl/client/view/images/emptyStar.png");
            starRatings.setAllStarsEmpty(labelList, path);
        }
    }

    private void addStars() {
        labelList.add(lblS1);
        labelList.add(lblS2);
        labelList.add(lblS3);
        labelList.add(lblS4);
        labelList.add(lblS5);
    }

    private void addStaticStars() {
        staticLabelList.add(lblR1);
        staticLabelList.add(lblR2);
        staticLabelList.add(lblR3);
        staticLabelList.add(lblR4);
        staticLabelList.add(lblR5);
    }

    private void saveRate(double newRate) {
        String rateS = Double.toString(newRate);
        Book newBook = new Book(book.getmCode(), book.getName(),
                book.getDescription(), book.getAuthor(), book.getSubject(),
                book.getType(), book.getLanguage(),
                book.getDownloadable(), rateS);
        try {
            boolean isSaved
                    = new ControllerFactoryImpl()
                    .getBookController().updateRate(newBook, mCode);

            if (isSaved) {

                panelStar.setVisible(false);
                lblRateThis.setVisible(false);
            }
        } catch (IOException | NotBoundException ex) {
            JOptionPane.showMessageDialog(null, "Server Disconnected",
                    "Oops!",
                    JOptionPane.INFORMATION_MESSAGE, icon);
        }
    }

    private BufferedImage resizeImage(BufferedImage currentImage) {
        BufferedImage resized
                = new BufferedImage(130, 138, currentImage.getType());
        Graphics2D g = resized.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION,
                RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.drawImage(currentImage, 0, 0, 130, 138, 0, 0, currentImage.getWidth(),
                currentImage.getHeight(), null);
        g.dispose();
        return resized;
    }

    private void arrangeView(String type) throws IOException {
        SoftwareFactory softwareFactory = new SoftwareFactoryImpl();
        if ("Audio".equalsIgnoreCase(type)) {
            softwareFactory.getMediaPlayerSof(tempFilePath);
        } else if ("Video".equalsIgnoreCase(type)) {
            softwareFactory.getMediaPlayerSof(tempFilePath);
        } else if ("Image".equalsIgnoreCase(type)) {
            softwareFactory.getImageViewerSof("./src/tempfiles/image/");
        } else if ("PDF".equalsIgnoreCase(type)) {
            softwareFactory.getPDFViewerSof(tempFilePath);
        }
    }

    private byte[] loadBook()
            throws IOException, RemoteException,
            MalformedURLException, NotBoundException {
        byte[] eBook
                = new ControllerFactoryImpl()
                .getBookController().viewBook(mCode);
        return eBook;
    }

    private void saveAsTempery(byte[] eBook, String mCode)
            throws IOException {
        File file = null;
        String format = ".txt";
        String type = txtMediaType.getText();
        if ("Audio".equalsIgnoreCase(type)) {
            format = ".mp3";
        } else if ("Video".equalsIgnoreCase(type)) {
            format = ".mp4";
        } else if ("Image".equalsIgnoreCase(type)) {
            format = ".jpg";
        } else if ("PDF".equalsIgnoreCase(type)) {
            format = ".pdf";
        }
        boolean isSaved = false;
        // file = new File("./src/tempfiles/" + mCode + format);

        if ("Image".equalsIgnoreCase(type)) {
            file = new File("./src/tempfiles/image/" + mCode + format);
            new TransportableItem().toFile(file, eBook);
            isSaved = file.exists();
            if (isSaved) {

                this.targetFile = file;
                this.tempFilePath = "./src/tempfiles/image/" + mCode + format;
                arrangeView(txtMediaType.getText());
            }
        } else {
             file = new File("./src/tempfiles/" + mCode + format);
            new TransportableItem().toFile(file, eBook);
            isSaved = file.exists();
            if (isSaved) {

                this.targetFile = file;
                this.tempFilePath = "./src/tempfiles/" + mCode + format;
                arrangeView(txtMediaType.getText());
            }
        }
    }

    private boolean saveComment(String mCode)
            throws IOException, RemoteException, NotBoundException {

        String cid = "0";
        String code = mCode;
        String sender = (String) cmbName.getSelectedItem();
        String content = txtComment.getText();
        Date date = new Date();
        SimpleDateFormat simpledateformat
                = (SimpleDateFormat) DateFormat
                .getDateInstance(DateFormat.LONG);
        String newDate = simpledateformat.format(date);

        Comment comment = new Comment(cid, mCode, sender, newDate, content);
        boolean isAdded
                = new ControllerFactoryImpl().
                getCommentController().saveComment(comment);
        return isAdded;
    }

    private void loadComments(String mCode)
            throws IOException, RemoteException, NotBoundException {
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        ArrayList<Comment> commentList
                = new ControllerFactoryImpl()
                .getCommentController().getCommentOnBook(mCode);
        dtm.setRowCount(0);
        for (Comment comment : commentList) {
            Object[] row = {"<html>"
                + "<span style=\"color: 4183D7;\">" + comment.getContent()
                + "</span>"
                + "<br>"
                + "<font size = -1>" + comment.getSender() + "</font>"
                + "<br>"
                + "<font size = -1>" + comment.getDate() + "</font>"
                + "</html>"};
            dtm.addRow(row);
        }
    }

    private void saveAccess()
            throws IOException, RemoteException, NotBoundException {
        DateFormat df = new SimpleDateFormat("HH:mm:ss");
        Date accessDate = new Date();
        String accessTime = df.format(accessDate);

        Date date = new Date();
        SimpleDateFormat simpledateformat
                = (SimpleDateFormat) DateFormat
                .getDateInstance(DateFormat.LONG);
        String curDate = simpledateformat.format(date);

        Access access
                = new Access("0", catalogForm.getId(),
                        mCode, curDate, accessTime);
        boolean isSaved
                = new ControllerFactoryImpl()
                .getAccessController().saveAccess(access);
        if (isSaved) {
            System.out.println("Saved");
        }
    }

    private boolean saveInPen()
            throws IOException, RemoteException,
            MalformedURLException, NotBoundException {

        boolean isSaved = false;
        String name
                = JOptionPane.showInputDialog(this,
                        "What is this Book about?", "Save Note", 0);
        if (DetectDriver.detectedPorts.size() > 0) {
            String path = DetectDriver.detectedPorts.get(0);
            String format = getFormat();
            File file = new File(path + name + format);
            if (file != null) {
                byte[] eBook = loadBook();
                new TransportableItem().toFile(file, eBook);
                isSaved = file.exists();
            }
        } else {
            JOptionPane.showMessageDialog(this,
                    "Please Connect a Pen Drive...", "Message", 1);
        }
        return isSaved;
    }

    private String getFormat() {
        String format = ".txt";
        String type = txtMediaType.getText();
        if ("Audio".equalsIgnoreCase(type)) {
            format = ".mp3";
        } else if ("Video".equalsIgnoreCase(type)) {
            format = ".mp4";
        } else if ("Image".equalsIgnoreCase(type)) {
            format = ".jpg";
        } else if ("PDF".equalsIgnoreCase(type)) {
            format = ".pdf";
        }
        return format;
    }

    private boolean saveDownload()
            throws IOException, RemoteException, NotBoundException {

        DateFormat df = new SimpleDateFormat("HH:mm:ss");
        Date accessDate = new Date();
        String accessTime = df.format(accessDate);

        Date date = new Date();
        SimpleDateFormat simpledateformat
                = (SimpleDateFormat) DateFormat
                .getDateInstance(DateFormat.LONG);
        String curDate = simpledateformat.format(date);

        Download download = new Download("0", catalogForm.getId(),
                mCode, curDate, accessTime);

        boolean isSaved
                = new ControllerFactoryImpl()
                .getDownloadController().saveDownload(download);

        return isSaved;
    }

    public void updateRate(String newRate) {
        double newRated = Double.parseDouble(newRate);
        System.out.println("Rate " + newRate);
        drawRatingStars(newRated);
    }

    private void setFullScreen() {
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        setSize(screenSize.width, screenSize.height);

        Component component = this;
        component.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                posX = e.getX();
                posY = e.getY();
            }
        });

        component.addMouseMotionListener(new MouseAdapter() {
            @Override
            public void mouseDragged(MouseEvent evt) {
                Rectangle rectangle = getBounds();
                setBounds(evt.getXOnScreen() - posX, evt.getYOnScreen()
                        - posY, rectangle.width, rectangle.height);
            }
        });
    }

    /**
     * Sets current time.
     */
    private void getTime() {
        new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    Date curDate = new Date();
                    SimpleDateFormat dateFormat
                            = new SimpleDateFormat("HH:mm aa");
                    String currentTime = dateFormat.format(curDate);

                    lblClock.setText(currentTime);
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        JOptionPane.showMessageDialog(
                                PreviewForm.this, "Database Error...");
                    }
                }
            }
        }).start();
    }
 private void deleteTemp() {
        File file = new File("./src/tempfiles/");
            String[] fileNames = file.list();
            for (String names : fileNames) {
                System.out.println(names);
                if("image".equals(names)){
                    File f = new File("./src/tempfiles/"+fileNames);
                    f.delete();
                }
            }
    }
}
